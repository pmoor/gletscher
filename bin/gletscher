#!/usr/bin/env python3

# Copyright 2012 Patrick Moor <patrick@moor.ws>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import gletscher.commands.backup
from gletscher.commands.download_catalog import download_catalog_command
import gletscher.commands.new
import gletscher.commands.reconcile
from gletscher.commands.search_catalog import search_catalog_command
import gletscher.commands.upload_catalog
from gletscher.commands.glacier_list_jobs import glacier_list_jobs_command
from gletscher.commands.glacier_retrieve_job_output import glacier_retrieve_job_output_command

parser = argparse.ArgumentParser(
    description="Tool for backing up files to Amazon's Glacier Service.")
parser.add_argument(
    "-c", "--config", help="the configuration directory to use", required=True)

subparsers = parser.add_subparsers(
    title="Supported gletscher.commands",
    description="Offers a variety of gletscher commands",
    help="such as these",
    dest="command")

gletscher.commands.new.register(subparsers)
gletscher.commands.backup.register(subparsers)
gletscher.commands.reconcile.register(subparsers)
gletscher.commands.upload_catalog.register(subparsers)

# Search Catalog
search_catalog_parser = subparsers.add_parser(
    "search_catalog", help="looks for files in a catalog")
search_catalog_parser.add_argument(
    "--catalog", help="catalog to search", default="default")
search_catalog_parser.add_argument(
    "reg_exps", help="regular expressions to match against", nargs="+")
search_catalog_parser.set_defaults(fn=search_catalog_command)

# Download Catalog
download_catalog_parser = subparsers.add_parser(
    "download_catalog", help="downloads and merges a catalog/index from Glacier")
download_catalog_parser.set_defaults(fn=download_catalog_command)

# List Jobs
glacier_list_jobs_parser = subparsers.add_parser(
    "glacier_list_jobs", help="listing of all glacier jobs")
glacier_list_jobs_parser.set_defaults(fn=glacier_list_jobs_command)

# Retrieve Job Output
glacier_retrieve_job_output_parser = subparsers.add_parser(
    "glacier_retrieve_job_output", help="manually retrieves job output")
glacier_retrieve_job_output_parser.add_argument(
    "--job_id", help="JobId to fetch", required=True)
glacier_retrieve_job_output_parser.add_argument(
    "-o", "--output", help="file to store output in", required=True)
glacier_retrieve_job_output_parser.set_defaults(fn=glacier_retrieve_job_output_command)

args = parser.parse_args()
if not args.command:
    parser.error("no command specified")
args.fn(args)
#import cProfile
#cProfile.run('args.fn(args)', 'cprofile.out')
